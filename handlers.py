from datetime import datetime
from aiogram import Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from config import MESSAGES
from database import (
    get_schedule, get_schedule_by_date, get_schedule_by_specific_date,
    search_appointment, delete_appointment, update_appointment_time,
    check_time_conflict, get_appointment_by_id, add_appointment, get_stats_summary
)
from keyboards import (
    get_main_menu_keyboard, get_schedule_navigation_keyboard,
    get_appointment_actions_keyboard, get_delete_confirmation_keyboard,
    get_edit_schedule_keyboard, get_selected_date_keyboard,
    get_add_appointment_confirmation_keyboard, get_cancel_add_keyboard,
    get_main_menu_inline_keyboard
)
from utils import (
    format_date_russian, validate_time_format, validate_date_format,
    format_schedule_text, format_appointment_info, format_multiple_appointments,
    format_delete_confirmation, format_time_change_success, format_delete_success,
    format_time_conflict, format_appointment_confirmation, format_appointment_success,
    validate_client_name, validate_service_name
)
from states import EditStates, AddAppointmentStates

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
router = Router()


@router.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    stats = get_stats_summary()

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç! üëã\n\n"
        "–Ø ‚Äî –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –±–æ–ª—å—à–µ –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å –ø—Ä–æ –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å –∫—É—á—É –≤—Ä–µ–º–µ–Ω–∏.\n\n"
        "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
        "‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∑–∞–ø–∏—Å–∏ –Ω–∞ –¥–µ–Ω—å\n"
        "‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –∫–ª–∏–µ–Ω—Ç–∞—Ö –∑–∞—Ä–∞–Ω–µ–µ\n"
        "‚úÖ –£–¥–æ–±–Ω–æ –≤–µ—Å—Ç–∏ –≥—Ä–∞—Ñ–∏–∫ –ø—Ä—è–º–æ –≤ Telegram\n\n"
        f"üìä –°–µ–≥–æ–¥–Ω—è —É –≤–∞—Å: {stats['today']} –∑–∞–ø–∏—Å–µ–π\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ ‚¨áÔ∏è"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    main_keyboard = get_main_menu_keyboard()
    await message.answer(welcome_text, reply_markup=main_keyboard)


@router.callback_query()
async def handle_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö callback –∑–∞–ø—Ä–æ—Å–æ–≤"""

    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    if callback.data == "edit_schedule":
        await callback.message.answer(MESSAGES['search_prompt'])
        await state.set_state(EditStates.waiting_for_search)

    # –í—ã–±–æ—Ä –¥–∞—Ç—ã
    elif callback.data == "select_date":
        await callback.message.answer(MESSAGES['date_prompt'])
        await state.set_state(EditStates.waiting_for_date)

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –¥–Ω—è–º
    elif callback.data.startswith("next_day_"):
        day_offset = int(callback.data.replace("next_day_", ""))
        appointments, target_date = get_schedule_by_date(day_offset)

        schedule_text = format_schedule_text(appointments, target_date)
        keyboard = get_schedule_navigation_keyboard(day_offset)

        await callback.message.edit_text(schedule_text, reply_markup=keyboard)

    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø–∏—Å–∏
    elif callback.data.startswith("time_"):
        appointment_id = callback.data.replace("time_", "")
        await state.update_data(appointment_id=appointment_id)

        await callback.message.edit_text(MESSAGES['time_prompt'])
        await state.set_state(EditStates.waiting_for_new_time)

    # –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
    elif callback.data.startswith("delete_"):
        appointment_id = callback.data.replace("delete_", "")
        appointment_info = get_appointment_by_id(appointment_id)

        if appointment_info:
            client_name, appointment_date, appointment_time, service = appointment_info
            confirmation_text = format_delete_confirmation(
                client_name, appointment_date, appointment_time, service
            )
            keyboard = get_delete_confirmation_keyboard(appointment_id)

            await callback.message.edit_text(confirmation_text, reply_markup=keyboard)
        else:
            await callback.message.edit_text(MESSAGES['appointment_not_found'])

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
    elif callback.data.startswith("confirm_delete_"):
        appointment_id = callback.data.replace("confirm_delete_", "")
        appointment_info = get_appointment_by_id(appointment_id)

        if appointment_info:
            client_name, appointment_date, appointment_time, _ = appointment_info
            delete_appointment(appointment_id)

            success_text = format_delete_success(client_name, appointment_date, appointment_time)
            await callback.message.edit_text(success_text)
        else:
            await callback.message.edit_text(MESSAGES['appointment_not_found'])

        await state.clear()

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
    elif callback.data == "confirm_add_appointment":
        data = await state.get_data()
        client_name = data.get('client_name')
        appointment_date = data.get('appointment_date')
        appointment_time = data.get('appointment_time')
        service = data.get('service')

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        appointment_id = add_appointment(client_name, appointment_date, appointment_time, service)

        success_text = format_appointment_success(
            client_name, appointment_date, appointment_time, service, appointment_id
        )

        await callback.message.edit_text(success_text)
        await state.clear()

    # –û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
    elif callback.data == "cancel_add_appointment":
        await callback.message.edit_text(MESSAGES['appointment_cancelled'])
        await state.clear()

    # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    elif callback.data == "main_menu":
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        stats = get_stats_summary()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        welcome_text = (
            "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å—è–º–∏!\n\n"
            f"üìä –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"üìÖ –°–µ–≥–æ–¥–Ω—è: {stats['today']} –∑–∞–ø–∏—Å–µ–π\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ ‚¨áÔ∏è"
        )

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
        try:
            await callback.message.delete()
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        main_keyboard = get_main_menu_keyboard()
        await callback.message.answer(welcome_text, reply_markup=main_keyboard)

    # –ë—ã—Å—Ç—Ä—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    elif callback.data == "schedule_today":
        appointments = get_schedule()
        today = datetime.now().date()

        schedule_text = format_schedule_text(appointments, today)
        keyboard = get_schedule_navigation_keyboard(0)

        await callback.message.edit_text(schedule_text, reply_markup=keyboard)

    # –ë—ã—Å—Ç—Ä—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    elif callback.data == "schedule_tomorrow":
        appointments, tomorrow = get_schedule_by_date(1)

        schedule_text = format_schedule_text(appointments, tomorrow)
        keyboard = get_schedule_navigation_keyboard(1)

        await callback.message.edit_text(schedule_text, reply_markup=keyboard)

    # –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫
    elif callback.data == "quick_search":
        await callback.message.edit_text(MESSAGES['search_feature'])
        await state.set_state(EditStates.waiting_for_search)

    # –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è
    elif callback.data == "cancel_delete":
        await callback.message.edit_text(MESSAGES['delete_cancelled'])
        await state.clear()

    await callback.answer()


@router.message()
async def handle_message(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    current_state = await state.get_state()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–∏—Å–∫–∞ –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if current_state == EditStates.waiting_for_search:
        search_term = message.text.strip()
        appointments = search_appointment(search_term)

        if not appointments:
            await message.answer(MESSAGES['not_found'])
            return

        if len(appointments) == 1:
            # –ù–∞–π–¥–µ–Ω–∞ –æ–¥–Ω–∞ –∑–∞–ø–∏—Å—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–µ–π—Å—Ç–≤–∏–π
            appointment_id, client_name, appointment_date, appointment_time, service = appointments[0]

            info_text = format_appointment_info(
                appointment_id, client_name, appointment_date, appointment_time, service
            )
            keyboard = get_appointment_actions_keyboard(appointment_id)

            await message.answer(info_text, reply_markup=keyboard)
        else:
            # –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
            result_text = format_multiple_appointments(appointments)
            await message.answer(result_text)

        await state.clear()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
    elif current_state == EditStates.waiting_for_new_time:
        new_time = message.text.strip()
        data = await state.get_data()
        appointment_id = data.get('appointment_id')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
        if not validate_time_format(new_time):
            await message.answer(MESSAGES['time_format_error'])
            return  # –ù–µ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –∂–¥–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏
        appointment_info = get_appointment_by_id(appointment_id)

        if appointment_info:
            old_client_name, appointment_date, old_time, service = appointment_info
            date_obj = datetime.strptime(appointment_date, '%Y-%m-%d').date()
            formatted_date = format_date_russian(date_obj)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç –≤—Ä–µ–º–µ–Ω–∏
            conflict = check_time_conflict(new_time, appointment_date, appointment_id)

            if conflict:
                conflict_text = format_time_conflict(new_time, formatted_date, conflict[0])
                await message.answer(conflict_text)
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
                update_appointment_time(appointment_id, new_time)

                success_text = format_time_change_success(
                    old_client_name, appointment_date, old_time, new_time, service
                )
                await message.answer(success_text)
        else:
            await message.answer(MESSAGES['appointment_not_found'])

        await state.clear()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã
    elif current_state == EditStates.waiting_for_date:
        date_input = message.text.strip()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
        if not validate_date_format(date_input):
            await message.answer(MESSAGES['date_format_error'])
            return  # –ù–µ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –∂–¥–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥

        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
        appointments, target_date = get_schedule_by_specific_date(date_input)

        if target_date is None:
            await message.answer(MESSAGES['error_processing_date'])
            return

        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º
        schedule_text = format_schedule_text(appointments, target_date)

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≤—ã–±–æ—Ä–∞ –¥—Ä—É–≥–æ–π –¥–∞—Ç—ã
        keyboard = get_selected_date_keyboard()

        await message.answer(schedule_text, reply_markup=keyboard)
        await state.clear()

    # === –û–ë–†–ê–ë–û–¢–ö–ê –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ó–ê–ü–ò–°–ò ===

    # –û–∂–∏–¥–∞–Ω–∏–µ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞
    elif current_state == AddAppointmentStates.waiting_for_client_name:
        client_name = message.text.strip()

        if not validate_client_name(client_name):
            keyboard = get_cancel_add_keyboard()
            await message.answer(MESSAGES['invalid_client_name'], reply_markup=keyboard)
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –¥–∞—Ç—ã
        await state.update_data(client_name=client_name)
        keyboard = get_cancel_add_keyboard()
        await message.answer(MESSAGES['add_appointment_date'], reply_markup=keyboard)
        await state.set_state(AddAppointmentStates.waiting_for_appointment_date)

    # –û–∂–∏–¥–∞–Ω–∏–µ –¥–∞—Ç—ã –∑–∞–ø–∏—Å–∏
    elif current_state == AddAppointmentStates.waiting_for_appointment_date:
        date_input = message.text.strip()

        if not validate_date_format(date_input):
            keyboard = get_cancel_add_keyboard()
            await message.answer(MESSAGES['date_format_error'], reply_markup=keyboard)
            return

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        try:
            appointment_date = datetime.strptime(date_input, '%d.%m.%Y').date().strftime('%Y-%m-%d')
            await state.update_data(appointment_date=appointment_date)

            keyboard = get_cancel_add_keyboard()
            await message.answer(MESSAGES['add_appointment_time'], reply_markup=keyboard)
            await state.set_state(AddAppointmentStates.waiting_for_appointment_time)
        except ValueError:
            keyboard = get_cancel_add_keyboard()
            await message.answer(MESSAGES['error_processing_date'], reply_markup=keyboard)

    # –û–∂–∏–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø–∏—Å–∏
    elif current_state == AddAppointmentStates.waiting_for_appointment_time:
        time_input = message.text.strip()

        if not validate_time_format(time_input):
            keyboard = get_cancel_add_keyboard()
            await message.answer(MESSAGES['time_format_error'], reply_markup=keyboard)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç –≤—Ä–µ–º–µ–Ω–∏
        data = await state.get_data()
        appointment_date = data.get('appointment_date')

        conflict = check_time_conflict(time_input, appointment_date)
        if conflict:
            date_obj = datetime.strptime(appointment_date, '%Y-%m-%d').date()
            formatted_date = format_date_russian(date_obj)
            conflict_text = format_time_conflict(time_input, formatted_date, conflict[0])

            keyboard = get_cancel_add_keyboard()
            await message.answer(conflict_text, reply_markup=keyboard)
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —É—Å–ª—É–≥–∏
        await state.update_data(appointment_time=time_input)
        keyboard = get_cancel_add_keyboard()
        await message.answer(MESSAGES['add_service'], reply_markup=keyboard)
        await state.set_state(AddAppointmentStates.waiting_for_service)

    # –û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —É—Å–ª—É–≥–∏
    elif current_state == AddAppointmentStates.waiting_for_service:
        service = message.text.strip()

        if not validate_service_name(service):
            keyboard = get_cancel_add_keyboard()
            await message.answer(MESSAGES['invalid_service'], reply_markup=keyboard)
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Å–ª—É–≥—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await state.update_data(service=service)

        data = await state.get_data()
        confirmation_text = format_appointment_confirmation(
            data['client_name'], data['appointment_date'],
            data['appointment_time'], service
        )

        keyboard = get_add_appointment_confirmation_keyboard()
        await message.answer(confirmation_text, reply_markup=keyboard)
        await state.set_state(AddAppointmentStates.confirmation)

    # === –û–ë–´–ß–ù–´–ï –ö–û–ú–ê–ù–î–´ ===
    elif message.text == "üìÖ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
        appointments = get_schedule()
        today = datetime.now().date()

        schedule_text = format_schedule_text(appointments, today)
        keyboard = get_schedule_navigation_keyboard(0)

        await message.answer(schedule_text, reply_markup=keyboard)

    elif message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å":
        keyboard = get_cancel_add_keyboard()
        await message.answer(MESSAGES['add_feature'], reply_markup=keyboard)
        await state.set_state(AddAppointmentStates.waiting_for_client_name)

    elif message.text == "üîç –ù–∞–π—Ç–∏ –∑–∞–ø–∏—Å—å":
        await message.answer(MESSAGES['search_prompt'])
        await state.set_state(EditStates.waiting_for_search)

    elif message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        stats = get_stats_summary()
        stats_text = MESSAGES['stats_message'].format(
            today=stats['today'],
            tomorrow=stats['tomorrow'],
            week=stats['week'],
            total=stats['total']
        )
        await message.answer(stats_text)

    else:
        if not current_state:  # –ï—Å–ª–∏ –Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            await message.answer(MESSAGES['unknown_command'])