import asyncio
from datetime import datetime

from aiogram import Bot, Dispatcher, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, CallbackQuery

from config import TOKEN, COMMON_MESSAGES, ADMIN_MESSAGES, CLIENT_MESSAGES, SERVICES, ADMIN_ID


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    print(f"üë®‚Äçüíº ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {ADMIN_ID}")

    # –°–æ–∑–¥–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
    storage = MemoryStorage()
    bot = Bot(token=TOKEN)
    dp = Dispatcher(storage=storage)

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
    dp.include_router(router)

    print("üöÄ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    print("üì± –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–ª—É—á–∏—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª")
    print("üë• –ö–ª–∏–µ–Ω—Ç—ã –ø–æ–ª—É—á–∞—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∑–∞–ø–∏—Å–∏")
    print("üìä –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await dp.start_polling(bot)


if __name__ == "__main__":
    from config import ADMIN_ID

    asyncio.run(main())
from database import (
    get_schedule_by_date, get_schedule_by_specific_date, get_stats_summary,
    get_client_appointments, get_available_times, book_appointment,
    cancel_appointment_by_client, reschedule_appointment, search_appointment,
    delete_appointment, update_appointment_time, update_appointment_client,
    update_appointment_service, check_time_conflict, get_appointment_by_id,
    add_appointment, get_client_info
)
from keyboards import (
    get_admin_menu_keyboard, get_admin_schedule_keyboard, get_admin_appointment_actions_keyboard,
    get_client_menu_keyboard, get_client_appointments_keyboard, get_available_times_keyboard,
    get_services_keyboard, get_appointment_confirmation_keyboard, get_client_appointment_actions_keyboard,
    get_cancel_confirmation_keyboard, get_delete_confirmation_keyboard, get_selected_date_keyboard,
    get_cancel_operation_keyboard, get_date_navigation_keyboard
)
from utils import (
    validate_time_format, validate_date_format, validate_client_name, validate_service_name,
    format_admin_schedule_text, format_admin_stats, format_client_appointments,
    format_available_times_text, format_services_text, format_booking_confirmation,
    format_booking_success, format_appointment_details, format_cancel_confirmation_client,
    format_reschedule_success, format_appointment_info, format_multiple_appointments,
    format_delete_confirmation, format_time_change_success, format_delete_success,
    format_time_conflict, get_contact_info, get_about_info, format_date_russian
)
from states import (
    AdminEditStates, AdminAddStates, ClientBookingStates,
    ClientRescheduleStates, ClientCancelStates
)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
router = Router()


def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id == ADMIN_ID


# ===== –ö–û–ú–ê–ù–î–ê START =====

@router.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –Ω–∞ –∞–¥–º–∏–Ω–∞ –∏ –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    user_id = message.from_user.id

    if is_admin(user_id):
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        stats = get_stats_summary()
        welcome_text = ADMIN_MESSAGES['main_menu_welcome'].format(
            today_count=stats['today'],
            tomorrow_count=stats['tomorrow'],
            week_count=stats['week']
        )
        keyboard = get_admin_menu_keyboard()
    else:
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
        welcome_text = CLIENT_MESSAGES['welcome']
        keyboard = get_client_menu_keyboard()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
        if message.from_user.first_name:
            # –ú–æ–∂–Ω–æ —Å—Ä–∞–∑—É –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            pass

    await message.answer(welcome_text, reply_markup=keyboard)


# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–û–ë–©–ï–ù–ò–ô –î–õ–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê =====

@router.message(lambda message: is_admin(message.from_user.id))
async def handle_admin_messages(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    current_state = await state.get_state()

    # === –°–û–°–¢–û–Ø–ù–ò–Ø –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø ===
    if current_state == AdminEditStates.waiting_for_search:
        await handle_admin_search(message, state)

    elif current_state == AdminEditStates.waiting_for_new_time:
        await handle_admin_time_change(message, state)

    elif current_state == AdminEditStates.waiting_for_new_client:
        await handle_admin_client_change(message, state)

    elif current_state == AdminEditStates.waiting_for_new_service:
        await handle_admin_service_change(message, state)

    elif current_state == AdminEditStates.waiting_for_date:
        await handle_admin_date_input(message, state)

    # === –°–û–°–¢–û–Ø–ù–ò–Ø –î–û–ë–ê–í–õ–ï–ù–ò–Ø ===
    elif current_state == AdminAddStates.waiting_for_client_name:
        await handle_admin_add_client_name(message, state)

    elif current_state == AdminAddStates.waiting_for_appointment_date:
        await handle_admin_add_date(message, state)

    elif current_state == AdminAddStates.waiting_for_appointment_time:
        await handle_admin_add_time(message, state)

    elif current_state == AdminAddStates.waiting_for_service:
        await handle_admin_add_service(message, state)

    # === –û–ë–´–ß–ù–´–ï –ö–û–ú–ê–ù–î–´ ===
    elif message.text == "üìÖ –í—Å–µ –∑–∞–ø–∏—Å–∏":
        await show_admin_schedule(message, 0)

    elif message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å":
        await start_admin_add_appointment(message, state)

    elif message.text == "üîç –ù–∞–π—Ç–∏ –∑–∞–ø–∏—Å—å":
        await message.answer(ADMIN_MESSAGES['search_prompt'])
        await state.set_state(AdminEditStates.waiting_for_search)

    elif message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        await show_admin_stats(message)

    elif message.text == "üë• –ö–ª–∏–µ–Ω—Ç—ã":
        await show_admin_clients(message)

    elif message.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        await show_admin_settings(message)

    else:
        if not current_state:
            await message.answer(COMMON_MESSAGES['unknown_command'])


# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–û–ë–©–ï–ù–ò–ô –î–õ–Ø –ö–õ–ò–ï–ù–¢–û–í =====

@router.message(lambda message: not is_admin(message.from_user.id))
async def handle_client_messages(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    current_state = await state.get_state()
    user_id = message.from_user.id

    # === –°–û–°–¢–û–Ø–ù–ò–Ø –ó–ê–ü–ò–°–ò ===
    if current_state == ClientBookingStates.waiting_for_name:
        await handle_client_name_input(message, state)

    elif current_state == ClientBookingStates.waiting_for_date:
        await handle_client_date_input(message, state)

    elif current_state == ClientBookingStates.waiting_for_time:
        await handle_client_time_input(message, state)

    elif current_state == ClientBookingStates.waiting_for_service:
        await handle_client_service_input(message, state)

    # === –°–û–°–¢–û–Ø–ù–ò–Ø –ü–ï–†–ï–ù–û–°–ê ===
    elif current_state == ClientRescheduleStates.waiting_for_appointment_selection:
        await handle_client_reschedule_selection(message, state)

    elif current_state == ClientRescheduleStates.waiting_for_new_date:
        await handle_client_reschedule_date(message, state)

    elif current_state == ClientRescheduleStates.waiting_for_new_time:
        await handle_client_reschedule_time(message, state)

    # === –°–û–°–¢–û–Ø–ù–ò–Ø –û–¢–ú–ï–ù–´ ===
    elif current_state == ClientCancelStates.waiting_for_appointment_selection:
        await handle_client_cancel_selection(message, state)

    # === –û–ë–´–ß–ù–´–ï –ö–û–ú–ê–ù–î–´ ===
    elif message.text == "üìÖ –ú–æ–∏ –∑–∞–ø–∏—Å–∏":
        await show_client_appointments(message, user_id)

    elif message.text == "‚ûï –ó–∞–ø–∏—Å–∞—Ç—å—Å—è":
        await start_client_booking(message, state)

    elif message.text == "üîÑ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å—å":
        await start_client_reschedule(message, state, user_id)

    elif message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å":
        await start_client_cancel(message, state, user_id)

    elif message.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã":
        await message.answer(get_contact_info())

    elif message.text == "‚ÑπÔ∏è –û –Ω–∞—Å":
        await message.answer(get_about_info())

    else:
        if not current_state:
            await message.answer(COMMON_MESSAGES['unknown_command'])


# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö CALLBACK –ó–ê–ü–†–û–°–û–í =====

@router.callback_query()
async def handle_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
    user_id = callback.from_user.id
    data = callback.data

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
    if is_admin(user_id):
        await handle_admin_callback(callback, state, data)
    else:
        await handle_client_callback(callback, state, data, user_id)

    await callback.answer()


async def handle_admin_callback(callback: CallbackQuery, state: FSMContext, data: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
    if data.startswith("admin_next_day_"):
        day_offset = int(data.replace("admin_next_day_", ""))
        appointments, target_date = get_schedule_by_date(day_offset)
        schedule_text = format_admin_schedule_text(appointments, target_date)
        keyboard = get_admin_schedule_keyboard(day_offset)
        await callback.message.edit_text(schedule_text, reply_markup=keyboard)

    # –í—ã–±–æ—Ä –¥–∞—Ç—ã
    elif data == "admin_select_date":
        await callback.message.edit_text(ADMIN_MESSAGES['date_prompt'])
        await state.set_state(AdminEditStates.waiting_for_date)

    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    elif data == "admin_edit_schedule":
        await callback.message.edit_text(ADMIN_MESSAGES['search_prompt'])
        await state.set_state(AdminEditStates.waiting_for_search)

    # –î–µ–π—Å—Ç–≤–∏—è —Å –∑–∞–ø–∏—Å—å—é
    elif data.startswith("admin_time_"):
        appointment_id = data.replace("admin_time_", "")
        await state.update_data(appointment_id=appointment_id)
        await callback.message.edit_text("üïê –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ (–ß–ß:–ú–ú):")
        await state.set_state(AdminEditStates.waiting_for_new_time)

    elif data.startswith("admin_client_"):
        appointment_id = data.replace("admin_client_", "")
        await state.update_data(appointment_id=appointment_id)
        await callback.message.edit_text("üë§ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞:")
        await state.set_state(AdminEditStates.waiting_for_new_client)

    elif data.startswith("admin_service_"):
        appointment_id = data.replace("admin_service_", "")
        await state.update_data(appointment_id=appointment_id)
        await callback.message.edit_text("üìã –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —É—Å–ª—É–≥—É:")
        await state.set_state(AdminEditStates.waiting_for_new_service)

    elif data.startswith("admin_delete_"):
        appointment_id = data.replace("admin_delete_", "")
        appointment_info = get_appointment_by_id(appointment_id)

        if appointment_info:
            client_name, appointment_date, appointment_time, service, _ = appointment_info
            confirmation_text = format_delete_confirmation(
                client_name, appointment_date, appointment_time, service
            )
            keyboard = get_delete_confirmation_keyboard(appointment_id, "admin")
            await callback.message.edit_text(confirmation_text, reply_markup=keyboard)

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
    elif data.startswith("admin_confirm_delete_"):
        appointment_id = data.replace("admin_confirm_delete_", "")
        appointment_info = get_appointment_by_id(appointment_id)

        if appointment_info:
            client_name, appointment_date, appointment_time, _, _ = appointment_info
            delete_appointment(appointment_id)
            success_text = format_delete_success(client_name, appointment_date, appointment_time)
            await callback.message.edit_text(success_text)
        await state.clear()

    # –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è
    elif data == "admin_cancel_delete":
        await callback.message.edit_text(COMMON_MESSAGES['delete_cancelled'])
        await state.clear()

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    elif data == "admin_main_menu":
        await state.clear()
        stats = get_stats_summary()
        welcome_text = ADMIN_MESSAGES['main_menu_welcome'].format(
            today_count=stats['today'],
            tomorrow_count=stats['tomorrow'],
            week_count=stats['week']
        )
        keyboard = get_admin_menu_keyboard()
        await callback.message.edit_text(welcome_text, reply_markup=keyboard)


async def handle_client_callback(callback: CallbackQuery, state: FSMContext, data: str, user_id: int):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤"""

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π
    if data.startswith("client_refresh_appointments_"):
        await show_client_appointments(callback.message, user_id, edit=True)

    # –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å
    elif data == "client_book_new":
        await start_client_booking(callback.message, state, edit=True)

    # –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏
    elif data.startswith("client_select_time_"):
        parts = data.replace("client_select_time_", "").split("_")
        time = parts[0]
        date = parts[1]

        await state.update_data(appointment_time=time)

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —É—Å–ª—É–≥–∏
        services_text = format_services_text()
        keyboard = get_services_keyboard()
        await callback.message.edit_text(services_text, reply_markup=keyboard)

    # –í—ã–±–æ—Ä —É—Å–ª—É–≥–∏
    elif data.startswith("client_select_service_"):
        service = data.replace("client_select_service_", "")
        await state.update_data(service=service)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        booking_data = await state.get_data()
        confirmation_text = format_booking_confirmation(
            booking_data['client_name'],
            booking_data['appointment_date'],
            booking_data['appointment_time'],
            service
        )
        keyboard = get_appointment_confirmation_keyboard()
        await callback.message.edit_text(confirmation_text, reply_markup=keyboard)

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
    elif data == "client_confirm_booking":
        booking_data = await state.get_data()

        appointment_id = book_appointment(
            user_id,
            booking_data['client_name'],
            booking_data['appointment_date'],
            booking_data['appointment_time'],
            booking_data['service']
        )

        success_text = format_booking_success(
            appointment_id,
            booking_data['client_name'],
            booking_data['appointment_date'],
            booking_data['appointment_time'],
            booking_data['service']
        )

        await callback.message.edit_text(success_text)
        await state.clear()

    # –û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏
    elif data == "client_cancel_booking":
        await callback.message.edit_text("‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞")
        await state.clear()

    # –î–µ–π—Å—Ç–≤–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∑–∞–ø–∏—Å—è–º–∏
    elif data.startswith("client_reschedule_"):
        appointment_id = data.replace("client_reschedule_", "")
        await start_reschedule_process(callback.message, state, appointment_id, user_id, edit=True)

    elif data.startswith("client_cancel_"):
        appointment_id = data.replace("client_cancel_", "")
        await start_cancel_process(callback.message, state, appointment_id, user_id, edit=True)

    elif data.startswith("client_details_"):
        appointment_id = data.replace("client_details_", "")
        await show_appointment_details(callback.message, appointment_id, edit=True)

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏
    elif data.startswith("client_confirm_cancel_"):
        appointment_id = data.replace("client_confirm_cancel_", "")

        if cancel_appointment_by_client(appointment_id, user_id):
            await callback.message.edit_text("‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞!")
        else:
            await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å")

        await state.clear()

    # –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å
    elif data == "client_keep_appointment":
        await callback.message.edit_text("‚úÖ –ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
        await state.clear()

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–ª–∏–µ–Ω—Ç–∞
    elif data == "client_main_menu":
        await state.clear()
        keyboard = get_client_menu_keyboard()
        await callback.message.edit_text(CLIENT_MESSAGES['welcome'], reply_markup=keyboard)


# ===== –§–£–ù–ö–¶–ò–ò –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê =====

async def show_admin_schedule(message: Message, day_offset: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
    appointments, target_date = get_schedule_by_date(day_offset)
    schedule_text = format_admin_schedule_text(appointments, target_date)
    keyboard = get_admin_schedule_keyboard(day_offset)
    await message.answer(schedule_text, reply_markup=keyboard)


async def show_admin_stats(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
    stats = get_stats_summary()
    stats_text = format_admin_stats(stats)
    await message.answer(stats_text)


async def show_admin_clients(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–∫–∞–∑ –∫–ª–∏–µ–Ω—Ç–æ–≤
    await message.answer("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏\n\n–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")


async def show_admin_settings(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    await message.answer("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n\n–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")


async def start_admin_add_appointment(message: Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    keyboard = get_cancel_operation_keyboard("admin", "add")
    await message.answer("üë§ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞:", reply_markup=keyboard)
    await state.set_state(AdminAddStates.waiting_for_client_name)


# –§—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def handle_admin_search(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∏—Å–∫ –∑–∞–ø–∏—Å–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    search_term = message.text.strip()
    appointments = search_appointment(search_term)

    if not appointments:
        await message.answer(COMMON_MESSAGES['not_found'])
        return

    if len(appointments) == 1:
        appointment_id, client_name, appointment_date, appointment_time, service = appointments[0]
        info_text = format_appointment_info(
            appointment_id, client_name, appointment_date, appointment_time, service
        )
        keyboard = get_admin_appointment_actions_keyboard(appointment_id)
        await message.answer(info_text, reply_markup=keyboard)
    else:
        result_text = format_multiple_appointments(appointments)
        await message.answer(result_text)

    await state.clear()


async def handle_admin_time_change(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    new_time = message.text.strip()

    if not validate_time_format(new_time):
        await message.answer(COMMON_MESSAGES['time_format_error'])
        return

    data = await state.get_data()
    appointment_id = data.get('appointment_id')
    appointment_info = get_appointment_by_id(appointment_id)

    if appointment_info:
        client_name, appointment_date, old_time, service, _ = appointment_info

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç –≤—Ä–µ–º–µ–Ω–∏
        conflict = check_time_conflict(new_time, appointment_date, appointment_id)

        if conflict:
            date_obj = datetime.strptime(appointment_date, '%Y-%m-%d').date()
            formatted_date = format_date_russian(date_obj)
            conflict_text = format_time_conflict(new_time, formatted_date, conflict[0])
            await message.answer(conflict_text)
        else:
            update_appointment_time(appointment_id, new_time)
            success_text = format_time_change_success(
                client_name, appointment_date, old_time, new_time, service
            )
            await message.answer(success_text)
    else:
        await message.answer(COMMON_MESSAGES['appointment_not_found'])

    await state.clear()


async def handle_admin_client_change(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    new_client_name = message.text.strip()

    if not validate_client_name(new_client_name):
        await message.answer(COMMON_MESSAGES['invalid_client_name'])
        return

    data = await state.get_data()
    appointment_id = data.get('appointment_id')

    update_appointment_client(appointment_id, new_client_name)
    await message.answer(f"‚úÖ –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {new_client_name}")
    await state.clear()


async def handle_admin_service_change(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —É—Å–ª—É–≥–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    new_service = message.text.strip()

    if not validate_service_name(new_service):
        await message.answer(COMMON_MESSAGES['invalid_service'])
        return

    data = await state.get_data()
    appointment_id = data.get('appointment_id')

    update_appointment_service(appointment_id, new_service)
    await message.answer(f"‚úÖ –£—Å–ª—É–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {new_service}")
    await state.clear()


async def handle_admin_date_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–∞—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    date_input = message.text.strip()

    if not validate_date_format(date_input):
        await message.answer(COMMON_MESSAGES['date_format_error'])
        return

    appointments, target_date = get_schedule_by_specific_date(date_input)

    if target_date is None:
        await message.answer(COMMON_MESSAGES['error_processing_date'])
        return

    schedule_text = format_admin_schedule_text(appointments, target_date)
    keyboard = get_selected_date_keyboard("admin")

    await message.answer(schedule_text, reply_markup=keyboard)
    await state.clear()


async def handle_admin_add_client_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏"""
    client_name = message.text.strip()

    if not validate_client_name(client_name):
        keyboard = get_cancel_operation_keyboard("admin", "add")
        await message.answer(COMMON_MESSAGES['invalid_client_name'], reply_markup=keyboard)
        return

    await state.update_data(client_name=client_name)
    keyboard = get_cancel_operation_keyboard("admin", "add")
    await message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–ø–∏—Å–∏ (–î–î.–ú–ú.–ì–ì–ì–ì):", reply_markup=keyboard)
    await state.set_state(AdminAddStates.waiting_for_appointment_date)


async def handle_admin_add_date(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–∞—Ç—ã –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏"""
    date_input = message.text.strip()

    if not validate_date_format(date_input):
        keyboard = get_cancel_operation_keyboard("admin", "add")
        await message.answer(COMMON_MESSAGES['date_format_error'], reply_markup=keyboard)
        return

    try:
        appointment_date = datetime.strptime(date_input, '%d.%m.%Y').date().strftime('%Y-%m-%d')
        await state.update_data(appointment_date=appointment_date)

        keyboard = get_cancel_operation_keyboard("admin", "add")
        await message.answer("üïê –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ (–ß–ß:–ú–ú):", reply_markup=keyboard)
        await state.set_state(AdminAddStates.waiting_for_appointment_time)
    except ValueError:
        keyboard = get_cancel_operation_keyboard("admin", "add")
        await message.answer(COMMON_MESSAGES['error_processing_date'], reply_markup=keyboard)


async def handle_admin_add_time(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏"""
    time_input = message.text.strip()

    if not validate_time_format(time_input):
        keyboard = get_cancel_operation_keyboard("admin", "add")
        await message.answer(COMMON_MESSAGES['time_format_error'], reply_markup=keyboard)
        return

    data = await state.get_data()
    appointment_date = data.get('appointment_date')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç –≤—Ä–µ–º–µ–Ω–∏
    conflict = check_time_conflict(time_input, appointment_date)
    if conflict:
        date_obj = datetime.strptime(appointment_date, '%Y-%m-%d').date()
        formatted_date = format_date_russian(date_obj)
        conflict_text = format_time_conflict(time_input, formatted_date, conflict[0])

        keyboard = get_cancel_operation_keyboard("admin", "add")
        await message.answer(conflict_text, reply_markup=keyboard)
        return

    await state.update_data(appointment_time=time_input)
    keyboard = get_cancel_operation_keyboard("admin", "add")
    await message.answer("üìã –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏:", reply_markup=keyboard)
    await state.set_state(AdminAddStates.waiting_for_service)


async def handle_admin_add_service(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —É—Å–ª—É–≥–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏"""
    service = message.text.strip()

    if not validate_service_name(service):
        keyboard = get_cancel_operation_keyboard("admin", "add")
        await message.answer(COMMON_MESSAGES['invalid_service'], reply_markup=keyboard)
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
    data = await state.get_data()
    appointment_id = add_appointment(
        data['client_name'],
        data['appointment_date'],
        data['appointment_time'],
        service
    )

    success_text = f"""‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!

üÜî ID –∑–∞–ø–∏—Å–∏: {appointment_id}
üë§ –ö–ª–∏–µ–Ω—Ç: {data['client_name']}
üìÖ –î–∞—Ç–∞: {data['appointment_date']}
üïê –í—Ä–µ–º—è: {data['appointment_time']}
üìã –£—Å–ª—É–≥–∞: {service}"""

    await message.answer(success_text)
    await state.clear()


# ===== –§–£–ù–ö–¶–ò–ò –ö–õ–ò–ï–ù–¢–û–í =====

async def show_client_appointments(message: Message, user_id: int, edit: bool = False):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞"""
    appointments = get_client_appointments(user_id)
    appointments_text = format_client_appointments(appointments)
    keyboard = get_client_appointments_keyboard(user_id)

    if edit:
        await message.edit_text(appointments_text, reply_markup=keyboard)
    else:
        await message.answer(appointments_text, reply_markup=keyboard)


async def start_client_booking(message: Message, state: FSMContext, edit: bool = False):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞"""
    booking_text = CLIENT_MESSAGES['book_appointment']
    keyboard = get_cancel_operation_keyboard("client", "booking")

    if edit:
        await message.edit_text(booking_text, reply_markup=keyboard)
    else:
        await message.answer(booking_text, reply_markup=keyboard)

    await state.set_state(ClientBookingStates.waiting_for_name)


async def start_client_reschedule(message: Message, state: FSMContext, user_id: int):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ–Ω–æ—Å–∞ –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞"""
    appointments = get_client_appointments(user_id)

    if not appointments:
        await message.answer(CLIENT_MESSAGES['no_appointments'])
        return

    appointments_text = format_client_appointments(appointments)
    reschedule_text = f"{CLIENT_MESSAGES['reschedule_appointment']}\n\n{appointments_text}\n\n–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞:"

    await message.answer(reschedule_text)
    await state.set_state(ClientRescheduleStates.waiting_for_appointment_selection)


async def start_client_cancel(message: Message, state: FSMContext, user_id: int):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞"""
    appointments = get_client_appointments(user_id)

    if not appointments:
        await message.answer(CLIENT_MESSAGES['no_appointments'])
        return

    appointments_text = format_client_appointments(appointments)
    cancel_text = f"{CLIENT_MESSAGES['cancel_appointment']}\n\n{appointments_text}\n\n–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã:"

    await message.answer(cancel_text)
    await state.set_state(ClientCancelStates.waiting_for_appointment_selection)


# –§—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–æ–≤
async def handle_client_name_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞"""
    client_name = message.text.strip()

    if not validate_client_name(client_name):
        keyboard = get_cancel_operation_keyboard("client", "booking")
        await message.answer(COMMON_MESSAGES['invalid_client_name'], reply_markup=keyboard)
        return

    await state.update_data(client_name=client_name)
    keyboard = get_cancel_operation_keyboard("client", "booking")
    await message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–∞—Ç—É (–î–î.–ú–ú.–ì–ì–ì–ì):", reply_markup=keyboard)
    await state.set_state(ClientBookingStates.waiting_for_date)


async def handle_client_date_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–∞—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞"""
    date_input = message.text.strip()

    if not validate_date_format(date_input):
        keyboard = get_cancel_operation_keyboard("client", "booking")
        await message.answer(COMMON_MESSAGES['date_format_error'], reply_markup=keyboard)
        return

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
        target_date = datetime.strptime(date_input, '%d.%m.%Y').date()
        today = datetime.now().date()

        if target_date < today:
            keyboard = get_cancel_operation_keyboard("client", "booking")
            await message.answer("‚ùå –ù–µ–ª—å–∑—è –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É. –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ –±—É–¥—É—â—É—é –¥–∞—Ç—É:",
                                 reply_markup=keyboard)
            return

        appointment_date = target_date.strftime('%Y-%m-%d')
        await state.update_data(appointment_date=appointment_date)

        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è
        available_times = get_available_times(date_input)

        if not available_times:
            keyboard = get_cancel_operation_keyboard("client", "booking")
            no_time_text = CLIENT_MESSAGES['no_available_times']
            await message.answer(no_time_text, reply_markup=keyboard)
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è
        times_text = format_available_times_text(available_times, date_input)
        keyboard = get_available_times_keyboard(available_times, date_input)
        await message.answer(times_text, reply_markup=keyboard)

    except ValueError:
        keyboard = get_cancel_operation_keyboard("client", "booking")
        await message.answer(COMMON_MESSAGES['error_processing_date'], reply_markup=keyboard)


async def handle_client_time_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞ (–µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ –≤—Ä—É—á–Ω—É—é)"""
    time_input = message.text.strip()

    if not validate_time_format(time_input):
        keyboard = get_cancel_operation_keyboard("client", "booking")
        await message.answer(COMMON_MESSAGES['time_format_error'], reply_markup=keyboard)
        return

    data = await state.get_data()
    appointment_date = data.get('appointment_date')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏
    date_str = datetime.strptime(appointment_date, '%Y-%m-%d').strftime('%d.%m.%Y')
    available_times = get_available_times(date_str)

    if time_input not in available_times:
        keyboard = get_cancel_operation_keyboard("client", "booking")
        await message.answer(f"‚ùå –í—Ä–µ–º—è {time_input} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω:", reply_markup=keyboard)
        return

    await state.update_data(appointment_time=time_input)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —É—Å–ª—É–≥–∏
    services_text = format_services_text()
    keyboard = get_services_keyboard()
    await message.answer(services_text, reply_markup=keyboard)


async def handle_client_service_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —É—Å–ª—É–≥–∏ –∫–ª–∏–µ–Ω—Ç–∞ (–µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ –≤—Ä—É—á–Ω—É—é)"""
    service = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–∞—è —É—Å–ª—É–≥–∞ –≤ —Å–ø–∏—Å–∫–µ
    if service not in SERVICES:
        available_services = ", ".join(SERVICES.keys())
        keyboard = get_cancel_operation_keyboard("client", "booking")
        await message.answer(f"‚ùå –£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å–ª—É–≥–∏: {available_services}", reply_markup=keyboard)
        return

    await state.update_data(service=service)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    booking_data = await state.get_data()
    confirmation_text = format_booking_confirmation(
        booking_data['client_name'],
        booking_data['appointment_date'],
        booking_data['appointment_time'],
        service
    )
    keyboard = get_appointment_confirmation_keyboard()
    await message.answer(confirmation_text, reply_markup=keyboard)


async def handle_client_reschedule_selection(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞"""
    appointment_id = message.text.strip()

    if not appointment_id.isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–ø–∏—Å–∏ (—á–∏—Å–ª–æ)")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø–∏—Å—å –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    appointment_info = get_appointment_by_id(int(appointment_id))

    if not appointment_info:
        await message.answer("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    client_name, appointment_date, appointment_time, service, telegram_user_id = appointment_info

    if telegram_user_id != message.from_user.id:
        await message.answer("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∑–∞–ø–∏—Å—å")
        return

    await state.update_data(reschedule_appointment_id=appointment_id)
    await message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É (–î–î.–ú–ú.–ì–ì–ì–ì):")
    await state.set_state(ClientRescheduleStates.waiting_for_new_date)


async def handle_client_reschedule_date(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–≤–æ–π –¥–∞—Ç—ã –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞"""
    date_input = message.text.strip()

    if not validate_date_format(date_input):
        await message.answer(COMMON_MESSAGES['date_format_error'])
        return

    try:
        target_date = datetime.strptime(date_input, '%d.%m.%Y').date()
        today = datetime.now().date()

        if target_date < today:
            await message.answer("‚ùå –ù–µ–ª—å–∑—è –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –Ω–∞ –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É")
            return

        data = await state.get_data()
        appointment_id = data.get('reschedule_appointment_id')

        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è (–∏—Å–∫–ª—é—á–∞—è —Ç–µ–∫—É—â—É—é –∑–∞–ø–∏—Å—å)
        available_times = get_available_times(date_input, int(appointment_id))

        if not available_times:
            await message.answer(CLIENT_MESSAGES['no_available_times'])
            return

        await state.update_data(new_date=target_date.strftime('%Y-%m-%d'))

        times_text = format_available_times_text(available_times, date_input)
        keyboard = get_available_times_keyboard(available_times, date_input)
        await message.answer(times_text, reply_markup=keyboard)
        await state.set_state(ClientRescheduleStates.waiting_for_new_time)

    except ValueError:
        await message.answer(COMMON_MESSAGES['error_processing_date'])


async def handle_client_reschedule_time(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞"""
    time_input = message.text.strip()

    if not validate_time_format(time_input):
        await message.answer(COMMON_MESSAGES['time_format_error'])
        return

    data = await state.get_data()
    appointment_id = int(data.get('reschedule_appointment_id'))
    new_date = data.get('new_date')
    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ä–æ–π –∑–∞–ø–∏—Å–∏
    old_appointment = get_appointment_by_id(appointment_id)
    if not old_appointment:
        await message.answer(COMMON_MESSAGES['appointment_not_found'])
        await state.clear()
        return

    client_name, old_date, old_time, service, _ = old_appointment

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    date_str = datetime.strptime(new_date, '%Y-%m-%d').strftime('%d.%m.%Y')
    available_times = get_available_times(date_str, appointment_id)

    if time_input not in available_times:
        await message.answer(f"‚ùå –í—Ä–µ–º—è {time_input} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
        return

    # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –∑–∞–ø–∏—Å—å
    if reschedule_appointment(appointment_id, new_date, time_input, user_id):
        success_text = format_reschedule_success(
            appointment_id, client_name, old_date, old_time,
            new_date, time_input, service
        )
        await message.answer(success_text)
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ –∑–∞–ø–∏—Å–∏")

    await state.clear()


async def handle_client_cancel_selection(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã"""
    appointment_id = message.text.strip()

    if not appointment_id.isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–ø–∏—Å–∏ (—á–∏—Å–ª–æ)")
        return

    user_id = message.from_user.id
    appointment_info = get_appointment_by_id(int(appointment_id))

    if not appointment_info:
        await message.answer("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    client_name, appointment_date, appointment_time, service, telegram_user_id = appointment_info

    if telegram_user_id != user_id:
        await message.answer("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∑–∞–ø–∏—Å—å")
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã
    confirmation_text = format_cancel_confirmation_client(
        int(appointment_id), client_name, appointment_date, appointment_time, service
    )
    keyboard = get_cancel_confirmation_keyboard(appointment_id)

    await message.answer(confirmation_text, reply_markup=keyboard)
    await state.clear()


async def start_reschedule_process(message: Message, state: FSMContext, appointment_id: str, user_id: int,
                                   edit: bool = False):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ–Ω–æ—Å–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏"""
    appointment_info = get_appointment_by_id(int(appointment_id))

    if not appointment_info or appointment_info[4] != user_id:
        text = "‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º"
        if edit:
            await message.edit_text(text)
        else:
            await message.answer(text)
        return

    await state.update_data(reschedule_appointment_id=appointment_id)
    text = "üìÖ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É (–î–î.–ú–ú.–ì–ì–ì–ì):"

    if edit:
        await message.edit_text(text)
    else:
        await message.answer(text)

    await state.set_state(ClientRescheduleStates.waiting_for_new_date)


async def start_cancel_process(message: Message, state: FSMContext, appointment_id: str, user_id: int,
                               edit: bool = False):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏"""
    appointment_info = get_appointment_by_id(int(appointment_id))

    if not appointment_info or appointment_info[4] != user_id:
        text = "‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º"
        if edit:
            await message.edit_text(text)
        else:
            await message.answer(text)
        return

    client_name, appointment_date, appointment_time, service, _ = appointment_info

    confirmation_text = format_cancel_confirmation_client(
        int(appointment_id), client_name, appointment_date, appointment_time, service
    )
    keyboard = get_cancel_confirmation_keyboard(appointment_id)

    if edit:
        await message.edit_text(confirmation_text, reply_markup=keyboard)
    else:
        await message.answer(confirmation_text, reply_markup=keyboard)


async def show_appointment_details(message: Message, appointment_id: str, edit: bool = False):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∑–∞–ø–∏—Å–∏"""
    appointment_info = get_appointment_by_id(int(appointment_id))

    if not appointment_info:
        text = COMMON_MESSAGES['appointment_not_found']
        if edit:
            await message.edit_text(text)
        else:
            await message.answer(text)
        return

    client_name, appointment_date, appointment_time, service, _ = appointment_info
    details_text = format_appointment_details(
        int(appointment_id), client_name, appointment_date, appointment_time, service
    )
    keyboard = get_client_appointment_actions_keyboard(appointment_id)

    if edit:
        await message.edit_text(details_text, reply_markup=keyboard)
    else:
        await message.answer(details_text, reply_markup=keyboard)