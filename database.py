import sqlite3
import os
from datetime import datetime, timedelta
from config import DATABASE_PATH, WORKING_HOURS, SERVICES


def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π"""
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ë–î –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    db_dir = os.path.dirname(DATABASE_PATH)
    if db_dir and not os.path.exists(db_dir):
        os.makedirs(db_dir)

    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()

    # –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π
    cursor.execute("PRAGMA foreign_keys = ON")

    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∫–ª–∏–µ–Ω—Ç–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS clients (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                telegram_user_id INTEGER UNIQUE NOT NULL,
                name TEXT,
                phone TEXT,
                first_visit DATE,
                last_visit DATE,
                total_visits INTEGER DEFAULT 0,
                notes TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')

        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∑–∞–ø–∏—Å–µ–π —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Å–≤—è–∑—è–º–∏
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS appointments (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                client_name TEXT NOT NULL,
                telegram_user_id INTEGER,
                phone TEXT,
                appointment_date DATE NOT NULL,
                appointment_time TIME NOT NULL,
                service TEXT NOT NULL,
                status TEXT DEFAULT 'active',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (telegram_user_id) REFERENCES clients (telegram_user_id)
            )
        ''')

        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_appointment_date ON appointments(appointment_date)')
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_telegram_user_id ON appointments(telegram_user_id)')
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_appointment_status ON appointments(status)')
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_client_telegram_id ON clients(telegram_user_id)')

        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è updated_at
        cursor.execute('''
            CREATE TRIGGER IF NOT EXISTS update_appointments_timestamp 
            AFTER UPDATE ON appointments
            FOR EACH ROW
            BEGIN
                UPDATE appointments SET updated_at = CURRENT_TIMESTAMP WHERE id = NEW.id;
            END
        ''')

        cursor.execute('''
            CREATE TRIGGER IF NOT EXISTS update_clients_timestamp 
            AFTER UPDATE ON clients
            FOR EACH ROW
            BEGIN
                UPDATE clients SET updated_at = CURRENT_TIMESTAMP WHERE id = NEW.id;
            END
        ''')

        conn.commit()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü
        cursor.execute("PRAGMA table_info(appointments)")
        appointments_columns = [column[1] for column in cursor.fetchall()]
        print(f"üìã –ö–æ–ª–æ–Ω–∫–∏ —Ç–∞–±–ª–∏—Ü—ã appointments: {appointments_columns}")

        cursor.execute("PRAGMA table_info(clients)")
        clients_columns = [column[1] for column in cursor.fetchall()]
        print(f"üë• –ö–æ–ª–æ–Ω–∫–∏ —Ç–∞–±–ª–∏—Ü—ã clients: {clients_columns}")

    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        conn.rollback()
    finally:
        conn.close()


def check_database_integrity():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å
        cursor.execute("PRAGMA integrity_check")
        result = cursor.fetchone()

        if result[0] == "ok":
            print("‚úÖ –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –ë–î –≤ –ø–æ—Ä—è–¥–∫–µ")
            return True
        else:
            print(f"‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å—é –ë–î: {result[0]}")
            return False

    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}")
        return False
    finally:
        conn.close()


# ===== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê =====

def get_schedule_by_date(date_offset=0):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É (–¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    target_date = datetime.now().date() + timedelta(days=date_offset)

    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()

    try:
        cursor.execute('''
            SELECT client_name, appointment_time, service 
            FROM appointments 
            WHERE appointment_date = ? AND status = 'active'
            ORDER BY appointment_time
        ''', (target_date,))
        appointments = cursor.fetchall()
        return appointments, target_date

    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
        return [], target_date
    finally:
        conn.close()


def get_schedule_by_specific_date(date_str):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É (–¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    try:
        target_date = datetime.strptime(date_str, '%d.%m.%Y').date()

        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()

        cursor.execute('''
            SELECT id, client_name, appointment_time, service 
            FROM appointments 
            WHERE appointment_date = ? AND status = 'active'
            ORDER BY appointment_time
        ''', (target_date,))
        appointments = cursor.fetchall()

        return appointments, target_date

    except (ValueError, sqlite3.Error) as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ –¥–∞—Ç–µ: {e}")
        return None, None
    finally:
        if 'conn' in locals():
            conn.close()


def get_all_appointments():
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏ (–¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()

    try:
        cursor.execute('''
            SELECT id, client_name, appointment_date, appointment_time, service, 
                   COALESCE(telegram_user_id, 0) as telegram_user_id
            FROM appointments 
            WHERE status = 'active'
            ORDER BY appointment_date, appointment_time
        ''')
        appointments = cursor.fetchall()
        return appointments

    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π: {e}")
        return []
    finally:
        conn.close()


def get_stats_summary():
    """–ü–æ–ª—É—á–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–ø–∏—Å–µ–π"""
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()

    today = datetime.now().date()
    tomorrow = today + timedelta(days=1)
    week_start = today
    week_end = today + timedelta(days=7)

    try:
        # –ó–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        cursor.execute('SELECT COUNT(*) FROM appointments WHERE appointment_date = ? AND status = "active"', (today,))
        today_count = cursor.fetchone()[0]

        # –ó–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
        cursor.execute('SELECT COUNT(*) FROM appointments WHERE appointment_date = ? AND status = "active"',
                       (tomorrow,))
        tomorrow_count = cursor.fetchone()[0]

        # –ó–∞–ø–∏—Å–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é
        cursor.execute('SELECT COUNT(*) FROM appointments WHERE appointment_date BETWEEN ? AND ? AND status = "active"',
                       (week_start, week_end))
        week_count = cursor.fetchone()[0]

        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        cursor.execute('SELECT COUNT(*) FROM appointments WHERE status = "active"')
        total_count = cursor.fetchone()[0]

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤
        cursor.execute('SELECT COUNT(*) FROM clients')
        clients_count = cursor.fetchone()[0]

        return {
            'today': today_count,
            'tomorrow': tomorrow_count,
            'week': week_count,
            'total': total_count,
            'clients': clients_count
        }

    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return {
            'today': 0,
            'tomorrow': 0,
            'week': 0,
            'total': 0,
            'clients': 0
        }
    finally:
        conn.close()


# ===== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ö–õ–ò–ï–ù–¢–û–í =====

def get_client_appointments(telegram_user_id, include_past=False):
    """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–ø–∏—Å–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()

    try:
        if include_past:
            cursor.execute('''
                SELECT id, client_name, appointment_date, appointment_time, service, 
                       COALESCE(status, 'active') as status
                FROM appointments 
                WHERE telegram_user_id = ?
                ORDER BY appointment_date DESC, appointment_time DESC
            ''', (telegram_user_id,))
        else:
            today = datetime.now().date()
            cursor.execute('''
                SELECT id, client_name, appointment_date, appointment_time, service,
                       COALESCE(status, 'active') as status
                FROM appointments 
                WHERE telegram_user_id = ? AND appointment_date >= ? 
                AND COALESCE(status, 'active') = 'active'
                ORDER BY appointment_date, appointment_time
            ''', (telegram_user_id, today))

        appointments = cursor.fetchall()
        return appointments

    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        return []
    finally:
        conn.close()


def get_available_times(date_str, exclude_appointment_id=None):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É"""
    try:
        target_date = datetime.strptime(date_str, '%d.%m.%Y').date()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
        if target_date < datetime.now().date():
            return []

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–Ω—è—Ç–æ–µ –≤—Ä–µ–º—è
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()

        if exclude_appointment_id:
            cursor.execute('''
                SELECT appointment_time FROM appointments 
                WHERE appointment_date = ? AND status = 'active' AND id != ?
            ''', (target_date, exclude_appointment_id))
        else:
            cursor.execute('''
                SELECT appointment_time FROM appointments 
                WHERE appointment_date = ? AND status = 'active'
            ''', (target_date,))

        busy_times = [row[0] for row in cursor.fetchall()]

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è
        available_times = []
        start_hour, start_minute = map(int, WORKING_HOURS['start'].split(':'))
        end_hour, end_minute = map(int, WORKING_HOURS['end'].split(':'))
        break_start_hour, break_start_minute = map(int, WORKING_HOURS['break_start'].split(':'))
        break_end_hour, break_end_minute = map(int, WORKING_HOURS['break_end'].split(':'))

        current_time = datetime.combine(target_date, datetime.min.time().replace(hour=start_hour, minute=start_minute))
        end_time = datetime.combine(target_date, datetime.min.time().replace(hour=end_hour, minute=end_minute))
        break_start = datetime.combine(target_date,
                                       datetime.min.time().replace(hour=break_start_hour, minute=break_start_minute))
        break_end = datetime.combine(target_date,
                                     datetime.min.time().replace(hour=break_end_hour, minute=break_end_minute))

        while current_time < end_time:
            time_str = current_time.strftime('%H:%M')

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Ä–µ–º—è –æ–±–µ–¥–∞
            if break_start <= current_time < break_end:
                current_time += timedelta(minutes=30)
                continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç–æ –ª–∏ –≤—Ä–µ–º—è
            if time_str not in busy_times:
                # –ï—Å–ª–∏ —ç—Ç–æ —Å–µ–≥–æ–¥–Ω—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–æ
                if target_date == datetime.now().date():
                    if current_time.time() > datetime.now().time():
                        available_times.append(time_str)
                else:
                    available_times.append(time_str)

            current_time += timedelta(minutes=30)

        return available_times

    except (ValueError, sqlite3.Error) as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        return []
    finally:
        if 'conn' in locals():
            conn.close()


def register_or_update_client(telegram_user_id, name, phone=None):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ"""
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∫–ª–∏–µ–Ω—Ç
        cursor.execute('SELECT id FROM clients WHERE telegram_user_id = ?', (telegram_user_id,))
        existing_client = cursor.fetchone()

        if existing_client:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
            cursor.execute('''
                UPDATE clients SET name = ?, phone = ?, last_visit = ?
                WHERE telegram_user_id = ?
            ''', (name, phone, datetime.now().date(), telegram_user_id))
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
            cursor.execute('''
                INSERT INTO clients (telegram_user_id, name, phone, first_visit, last_visit)
                VALUES (?, ?, ?, ?, ?)
            ''', (telegram_user_id, name, phone, datetime.now().date(), datetime.now().date()))

        conn.commit()
        return True

    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        conn.rollback()
        return False
    finally:
        conn.close()


def book_appointment(telegram_user_id, client_name, appointment_date, appointment_time, service, phone=None):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞"""
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç –≤—Ä–µ–º–µ–Ω–∏
        conflict = check_time_conflict(appointment_time, appointment_date)
        if conflict:
            print(f"‚ö†Ô∏è –ö–æ–Ω—Ñ–ª–∏–∫—Ç –≤—Ä–µ–º–µ–Ω–∏: {appointment_time} —É–∂–µ –∑–∞–Ω—è—Ç–æ")
            return None

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
        cursor.execute('''
            INSERT INTO appointments (client_name, telegram_user_id, phone, appointment_date, appointment_time, service, status)
            VALUES (?, ?, ?, ?, ?, ?, 'active')
        ''', (client_name, telegram_user_id, phone, appointment_date, appointment_time, service))

        appointment_id = cursor.lastrowid

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
        register_or_update_client(telegram_user_id, client_name, phone)

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≤–∏–∑–∏—Ç–æ–≤
        cursor.execute('''
            UPDATE clients SET total_visits = total_visits + 1
            WHERE telegram_user_id = ?
        ''', (telegram_user_id,))

        conn.commit()
        return appointment_id

    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏: {e}")
        conn.rollback()
        return None
    finally:
        conn.close()


def cancel_appointment_by_client(appointment_id, telegram_user_id):
    """–û—Ç–º–µ–Ω—è–µ—Ç –∑–∞–ø–∏—Å—å –∫–ª–∏–µ–Ω—Ç–∞"""
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –∑–∞–ø–∏—Å—å –∫–ª–∏–µ–Ω—Ç—É
        cursor.execute('''
            SELECT id FROM appointments 
            WHERE id = ? AND telegram_user_id = ? AND status = 'active'
        ''', (appointment_id, telegram_user_id))

        if cursor.fetchone():
            cursor.execute('''
                UPDATE appointments SET status = 'cancelled_by_client'
                WHERE id = ?
            ''', (appointment_id,))
            conn.commit()
            return True

        return False

    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏: {e}")
        return False
    finally:
        conn.close()


def reschedule_appointment(appointment_id, new_date, new_time, telegram_user_id=None):
    """–ü–µ—Ä–µ–Ω–æ—Å–∏—Ç –∑–∞–ø–∏—Å—å –Ω–∞ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è"""
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç –≤—Ä–µ–º–µ–Ω–∏ (–∏—Å–∫–ª—é—á–∞—è —Ç–µ–∫—É—â—É—é –∑–∞–ø–∏—Å—å)
        conflict = check_time_conflict(new_time, new_date, appointment_id)
        if conflict:
            print(f"‚ö†Ô∏è –ö–æ–Ω—Ñ–ª–∏–∫—Ç –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ: {new_time} —É–∂–µ –∑–∞–Ω—è—Ç–æ")
            return False

        if telegram_user_id:
            # –ö–ª–∏–µ–Ω—Ç –º–æ–∂–µ—Ç –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∑–∞–ø–∏—Å–∏
            cursor.execute('''
                UPDATE appointments 
                SET appointment_date = ?, appointment_time = ?
                WHERE id = ? AND telegram_user_id = ? AND status = 'active'
            ''', (new_date, new_time, appointment_id, telegram_user_id))
        else:
            # –ê–¥–º–∏–Ω –º–æ–∂–µ—Ç –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—å –ª—é–±—ã–µ –∑–∞–ø–∏—Å–∏
            cursor.execute('''
                UPDATE appointments 
                SET appointment_date = ?, appointment_time = ?
                WHERE id = ? AND status = 'active'
            ''', (new_date, new_time, appointment_id))

        success = cursor.rowcount > 0
        conn.commit()
        return success

    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ –∑–∞–ø–∏—Å–∏: {e}")
        return False
    finally:
        conn.close()


# ===== –û–ë–©–ò–ï –§–£–ù–ö–¶–ò–ò =====

def add_appointment(client_name, appointment_date, appointment_time, service, telegram_user_id=None, phone=None):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)"""
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç –≤—Ä–µ–º–µ–Ω–∏
        conflict = check_time_conflict(appointment_time, appointment_date)
        if conflict:
            print(f"‚ö†Ô∏è –ö–æ–Ω—Ñ–ª–∏–∫—Ç –≤—Ä–µ–º–µ–Ω–∏: {appointment_time} —É–∂–µ –∑–∞–Ω—è—Ç–æ –∫–ª–∏–µ–Ω—Ç–æ–º {conflict[0]}")
            return None

        cursor.execute('''
            INSERT INTO appointments (client_name, telegram_user_id, phone, appointment_date, appointment_time, service, status)
            VALUES (?, ?, ?, ?, ?, ?, 'active')
        ''', (client_name, telegram_user_id, phone, appointment_date, appointment_time, service))

        appointment_id = cursor.lastrowid

        # –ï—Å–ª–∏ –µ—Å—Ç—å telegram_user_id, –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
        if telegram_user_id:
            register_or_update_client(telegram_user_id, client_name, phone)

        conn.commit()
        return appointment_id

    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏: {e}")
        conn.rollback()
        return None
    finally:
        conn.close()


def search_appointment(search_term):
    """–ü–æ–∏—Å–∫ –∑–∞–ø–∏—Å–∏ –ø–æ ID, –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞ –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏"""
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()

    try:
        if search_term.isdigit():
            # –ü–æ–∏—Å–∫ –ø–æ ID
            cursor.execute('''
                SELECT id, client_name, appointment_date, appointment_time, service 
                FROM appointments WHERE id = ? AND status = 'active'
            ''', (search_term,))
        else:
            # –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏
            cursor.execute('''
                SELECT id, client_name, appointment_date, appointment_time, service 
                FROM appointments 
                WHERE (client_name LIKE ? OR appointment_time LIKE ?) AND status = 'active'
                ORDER BY appointment_date, appointment_time
            ''', (f'%{search_term}%', f'%{search_term}%'))

        appointments = cursor.fetchall()
        return appointments

    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–ø–∏—Å–∏: {e}")
        return []
    finally:
        conn.close()


def delete_appointment(appointment_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ ID (–ø–æ–º–µ—á–∞–µ—Ç –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω—É—é)"""
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()

    try:
        cursor.execute('''
            UPDATE appointments SET status = 'deleted' 
            WHERE id = ? AND status = 'active'
        ''', (appointment_id,))

        success = cursor.rowcount > 0
        conn.commit()
        return success

    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏: {e}")
        return False
    finally:
        conn.close()


def update_appointment_time(appointment_id, new_time):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø–∏—Å–∏"""
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()

    try:
        cursor.execute('''
            UPDATE appointments SET appointment_time = ? 
            WHERE id = ? AND status = 'active'
        ''', (new_time, appointment_id))

        success = cursor.rowcount > 0
        conn.commit()
        return success

    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏: {e}")
        return False
    finally:
        conn.close()


def update_appointment_client(appointment_id, new_client_name):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞"""
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()

    try:
        cursor.execute('''
            UPDATE appointments SET client_name = ? 
            WHERE id = ? AND status = 'active'
        ''', (new_client_name, appointment_id))

        success = cursor.rowcount > 0
        conn.commit()
        return success

    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        return False
    finally:
        conn.close()


def update_appointment_service(appointment_id, new_service):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏"""
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()

    try:
        cursor.execute('''
            UPDATE appointments SET service = ? 
            WHERE id = ? AND status = 'active'
        ''', (new_service, appointment_id))

        success = cursor.rowcount > 0
        conn.commit()
        return success

    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏: {e}")
        return False
    finally:
        conn.close()


def check_time_conflict(new_time, appointment_date, exclude_id=None):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É"""
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()

    try:
        if exclude_id:
            cursor.execute('''
                SELECT client_name FROM appointments 
                WHERE appointment_time = ? AND appointment_date = ? AND id != ? AND status = 'active'
            ''', (new_time, appointment_date, exclude_id))
        else:
            cursor.execute('''
                SELECT client_name FROM appointments 
                WHERE appointment_time = ? AND appointment_date = ? AND status = 'active'
            ''', (new_time, appointment_date))

        conflict = cursor.fetchone()
        return conflict

    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞: {e}")
        return None
    finally:
        conn.close()


def get_appointment_by_id(appointment_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø–∏—Å–∏ –ø–æ ID"""
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()

    try:
        cursor.execute('''
            SELECT client_name, appointment_date, appointment_time, service, 
                   COALESCE(telegram_user_id, 0) as telegram_user_id
            FROM appointments 
            WHERE id = ? AND status = 'active'
        ''', (appointment_id,))

        appointment = cursor.fetchone()
        return appointment

    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –ø–æ ID: {e}")
        return None
    finally:
        conn.close()


def get_client_info(telegram_user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ"""
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()

    try:
        cursor.execute('''
            SELECT name, phone, first_visit, total_visits, notes
            FROM clients WHERE telegram_user_id = ?
        ''', (telegram_user_id,))

        client = cursor.fetchone()
        return client

    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ: {e}")
        return None
    finally:
        conn.close()


def get_appointments_count_by_date(date_str):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É"""
    try:
        target_date = datetime.strptime(date_str, '%d.%m.%Y').date()

        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()

        cursor.execute('''
            SELECT COUNT(*) FROM appointments 
            WHERE appointment_date = ? AND status = 'active'
        ''', (target_date,))

        count = cursor.fetchone()[0]
        return count

    except (ValueError, sqlite3.Error) as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –∑–∞–ø–∏—Å–µ–π: {e}")
        return 0
    finally:
        if 'conn' in locals():
            conn.close()


def cleanup_old_appointments(days_old=30):
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π (—Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π)"""
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()

    try:
        cutoff_date = datetime.now().date() - timedelta(days=days_old)

        cursor.execute('''
            UPDATE appointments SET status = 'archived'
            WHERE appointment_date < ? AND status IN ('cancelled_by_client', 'deleted')
        ''', (cutoff_date,))

        archived_count = cursor.rowcount
        conn.commit()

        print(f"üìã –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {archived_count} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π")
        return archived_count

    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∑–∞–ø–∏—Å–µ–π: {e}")
        return 0
    finally:
        conn.close()


def get_database_info():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    if not os.path.exists(DATABASE_PATH):
        return "‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

    size = os.path.getsize(DATABASE_PATH)
    size_mb = size / (1024 * 1024)

    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()

    try:
        cursor.execute("SELECT COUNT(*) FROM appointments WHERE status = 'active'")
        active_appointments = cursor.fetchone()[0]

        cursor.execute("SELECT COUNT(*) FROM appointments")
        total_appointments = cursor.fetchone()[0]

        cursor.execute("SELECT COUNT(*) FROM clients")
        total_clients = cursor.fetchone()[0]

        return f"""üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:
üìÅ –†–∞–∑–º–µ—Ä: {size_mb:.2f} MB
üìã –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {active_appointments}
üìù –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_appointments}
üë• –ö–ª–∏–µ–Ω—Ç–æ–≤: {total_clients}
üíæ –ü—É—Ç—å: {DATABASE_PATH}"""

    except sqlite3.Error as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}"
    finally:
        conn.close()


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
if __name__ == "__main__":
    init_database()
    check_database_integrity()
    print(get_database_info())
else:
    init_database()